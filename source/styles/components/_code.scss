@import '../settings';
@import '../mixins/fontsize';
@import '../mixins/mq';

pre, code {
  font-family: $font-family-code;
}

code {
  padding: 3px 5px;
  background: $color-lightgrey;
  color: $color-midgrey-dark;
  border-radius: $border-radius;
}

pre {
  display: block;
  position: relative;
  background: $color-darkgrey;
  color: $color-lightgrey;
  border-radius: 0 $border-radius $border-radius;
  margin-top: 35px;

  @include mq('mid') {
    margin-left: -15px;
    margin-right: -15px;
    margin-bottom: 15px;
  }

  code {
    display: block;
    position: relative;
    padding: 12px 15px;
    overflow-x: auto;
    background: $color-darkgrey;
    color: $color-lightgrey;
  }

  &:after {
    display: inline-block;
    position: absolute;
    top: -22px;
    left: 0;
    font-family: $font-family-default;
    font-weight: normal;
    @include font-size(10px);
    line-height: 1.2;
    background-color: lighten($color-darkgrey, 8%);
    padding: 6px 8px 4px;
    border-radius: $border-radius $border-radius 0 0;
    opacity: 1;
    text-transform: uppercase;
  }

  &.language-javascript, &.language-js {
    &:after {
      content: 'JavaScript';
    }
  }

  &.language-css:after {
    content: 'CSS';
  }

  &.language-html:after {
    content: 'HTML';
  }

  &.language-coffeescript, &.language-cs {
    &:after {
      content: 'CoffeeScript';
    }
  }

  &.language-php:after {
    content: 'PHP';
  }

  &.language-ruby, &.language-rb {
    &:after {
      content: 'Ruby';
    }
  }

  &.language-shell:after {
    content: 'Shell';
  }

  .comment {
    color: $color-code-comment;
  }

  .constant {
    color: $color-code-constant;
  }

  .storage {
    color: $color-code-storage;
  }

  .string, .comment.docstring {
    color: $color-code-string;
  }

  .support.tag {
    color: $color-code-tag;
  }

  .keyword {
    color: $color-code-keyword;
  }

  .selector {
    color: $color-code-selector;
  }

  .inherited-class {
    font-style: italic;
  }

  .operator, .support.tag-name, .entity.tag {
    color: $color-code-operator;
  }

  .entity, .support.attribute, .entity.attribute {
    color: $color-code-attribute;
  }

  .css-property, .storage.function {
    font-style: italic;
  }

  .variable {
    &.global, &.class, &.instance {
      color: $color-code-global;
    }
  }

  .support, code[data-language='c'] .function.call {
    color: $color-code-support;
  }

  code[data-language='html'] .support.operator {
    color: $color-white;
  }
}
